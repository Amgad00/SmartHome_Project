
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  000010cc  00001160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001de  008001de  000012de  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f7d  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec1  00000000  00000000  00004509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000178d  00000000  00000000  000053ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00006b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a95  00000000  00000000  00006f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c6d  00000000  00000000  000079bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000962a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3e       	cpi	r26, 0xE3	; 227
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <main>
      8a:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC.h"
#include <avr/io.h>

void ADC_Init()
{
	ADMUX = (1<<REFS0) | (1<<REFS1); //select use internal Vref
      92:	80 ec       	ldi	r24, 0xC0	; 192
      94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //enable ADC and divide MC clock by 128
      96:	87 e8       	ldi	r24, 0x87	; 135
      98:	86 b9       	out	0x06, r24	; 6
      9a:	08 95       	ret

0000009c <ADC_Read>:
}
unsigned short ADC_Read(unsigned char channel)
{
	unsigned short data = 0;
	ADMUX = (ADMUX & 0xE0) | (channel & 0x1f); //1st AND put zeros in the first 5 bits and leave the last 3 unchanged
      9c:	97 b1       	in	r25, 0x07	; 7
      9e:	90 7e       	andi	r25, 0xE0	; 224
      a0:	8f 71       	andi	r24, 0x1F	; 31
      a2:	89 2b       	or	r24, r25
      a4:	87 b9       	out	0x07, r24	; 7
	//2nd AND take the first 5 bits only
	ADCSRA |= (1<<ADSC); //start conversion
      a6:	86 b1       	in	r24, 0x06	; 6
      a8:	80 64       	ori	r24, 0x40	; 64
      aa:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA>>ADIF)&1); //read interrupt flag and stay at this line while it's 0 
      ac:	86 b1       	in	r24, 0x06	; 6
      ae:	82 95       	swap	r24
      b0:	8f 70       	andi	r24, 0x0F	; 15
      b2:	e1 f3       	breq	.-8      	; 0xac <ADC_Read+0x10>
	ADCSRA |= (1<<ADIF); //clear ADIF bit
      b4:	86 b1       	in	r24, 0x06	; 6
      b6:	80 61       	ori	r24, 0x10	; 16
      b8:	86 b9       	out	0x06, r24	; 6
	data = ADCL;
      ba:	24 b1       	in	r18, 0x04	; 4
	data |= (ADCH<<8);
      bc:	85 b1       	in	r24, 0x05	; 5
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	98 2f       	mov	r25, r24
      c2:	88 27       	eor	r24, r24
	return data;
      c4:	82 2b       	or	r24, r18
      c6:	08 95       	ret

000000c8 <DIO_u8read>:
#include <avr//io.h>
#include "Bitmath.h"
uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
      c8:	82 34       	cpi	r24, 0x42	; 66
      ca:	91 f0       	breq	.+36     	; 0xf0 <DIO_u8read+0x28>
      cc:	18 f4       	brcc	.+6      	; 0xd4 <DIO_u8read+0xc>
      ce:	81 34       	cpi	r24, 0x41	; 65
      d0:	31 f0       	breq	.+12     	; 0xde <DIO_u8read+0x16>
      d2:	29 c0       	rjmp	.+82     	; 0x126 <DIO_u8read+0x5e>
      d4:	83 34       	cpi	r24, 0x43	; 67
      d6:	a9 f0       	breq	.+42     	; 0x102 <DIO_u8read+0x3a>
      d8:	84 34       	cpi	r24, 0x44	; 68
      da:	e1 f0       	breq	.+56     	; 0x114 <DIO_u8read+0x4c>
      dc:	24 c0       	rjmp	.+72     	; 0x126 <DIO_u8read+0x5e>
	{
		case 'A' :
		return_value=GetBit(PINA,pinnumber);//Read the value from the given pin in port A
      de:	89 b3       	in	r24, 0x19	; 25
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_u8read+0x20>
      e4:	95 95       	asr	r25
      e6:	87 95       	ror	r24
      e8:	6a 95       	dec	r22
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_u8read+0x1c>
      ec:	81 70       	andi	r24, 0x01	; 1
		break;
      ee:	08 95       	ret
		
		case 'B' :
		return_value=GetBit(PINB,pinnumber);//Read the value from the given pin in port B
      f0:	86 b3       	in	r24, 0x16	; 22
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_u8read+0x32>
      f6:	95 95       	asr	r25
      f8:	87 95       	ror	r24
      fa:	6a 95       	dec	r22
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_u8read+0x2e>
      fe:	81 70       	andi	r24, 0x01	; 1
		break;
     100:	08 95       	ret
		
		case 'C' :
		return_value=GetBit(PINC,pinnumber);//Read the value from the given pin in port C
     102:	83 b3       	in	r24, 0x13	; 19
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_u8read+0x44>
     108:	95 95       	asr	r25
     10a:	87 95       	ror	r24
     10c:	6a 95       	dec	r22
     10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_u8read+0x40>
     110:	81 70       	andi	r24, 0x01	; 1
		break;
     112:	08 95       	ret
		
		case 'D' :
		return_value=GetBit(PIND,pinnumber);//Read the value from the given pin in port D
     114:	80 b3       	in	r24, 0x10	; 16
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_u8read+0x56>
     11a:	95 95       	asr	r25
     11c:	87 95       	ror	r24
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_u8read+0x52>
     122:	81 70       	andi	r24, 0x01	; 1
		break;
     124:	08 95       	ret
#include "DIO.h"
#include <avr//io.h>
#include "Bitmath.h"
uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
     126:	80 e0       	ldi	r24, 0x00	; 0
		return_value=GetBit(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
     128:	08 95       	ret

0000012a <DIO_Write>:




void DIO_Write(DIO_ChannelTypes ChannelID,STD_LevelTypes Level){
	DIO_PortTypes Portx = ChannelID/8;
     12a:	98 2f       	mov	r25, r24
     12c:	96 95       	lsr	r25
     12e:	96 95       	lsr	r25
     130:	96 95       	lsr	r25
	DIO_ChannelTypes ChannelPos = ChannelID%8;
     132:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
     134:	91 30       	cpi	r25, 0x01	; 1
     136:	21 f1       	breq	.+72     	; 0x180 <DIO_Write+0x56>
     138:	30 f0       	brcs	.+12     	; 0x146 <DIO_Write+0x1c>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	f1 f1       	breq	.+124    	; 0x1ba <DIO_Write+0x90>
     13e:	93 30       	cpi	r25, 0x03	; 3
     140:	09 f4       	brne	.+2      	; 0x144 <DIO_Write+0x1a>
     142:	58 c0       	rjmp	.+176    	; 0x1f4 <DIO_Write+0xca>
     144:	08 95       	ret
		case DIO_PortA:
		if(Level == STD_High){
     146:	61 30       	cpi	r22, 0x01	; 1
     148:	69 f4       	brne	.+26     	; 0x164 <DIO_Write+0x3a>
			SetBit(PORTA_Reg,ChannelPos);
     14a:	4b b3       	in	r20, 0x1b	; 27
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	b9 01       	movw	r22, r18
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_Write+0x2e>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_Write+0x2a>
     15c:	cb 01       	movw	r24, r22
     15e:	84 2b       	or	r24, r20
     160:	8b bb       	out	0x1b, r24	; 27
     162:	08 95       	ret
		}
		else{
			ClearBit(PORTA_Reg,ChannelPos);
     164:	4b b3       	in	r20, 0x1b	; 27
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	b9 01       	movw	r22, r18
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_Write+0x48>
     16e:	66 0f       	add	r22, r22
     170:	77 1f       	adc	r23, r23
     172:	8a 95       	dec	r24
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_Write+0x44>
     176:	cb 01       	movw	r24, r22
     178:	80 95       	com	r24
     17a:	84 23       	and	r24, r20
     17c:	8b bb       	out	0x1b, r24	; 27
     17e:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if(Level == STD_High){
     180:	61 30       	cpi	r22, 0x01	; 1
     182:	69 f4       	brne	.+26     	; 0x19e <DIO_Write+0x74>
			SetBit(PORTB_Reg,ChannelPos);
     184:	48 b3       	in	r20, 0x18	; 24
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	b9 01       	movw	r22, r18
     18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_Write+0x68>
     18e:	66 0f       	add	r22, r22
     190:	77 1f       	adc	r23, r23
     192:	8a 95       	dec	r24
     194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_Write+0x64>
     196:	cb 01       	movw	r24, r22
     198:	84 2b       	or	r24, r20
     19a:	88 bb       	out	0x18, r24	; 24
     19c:	08 95       	ret
		}
		else{
			ClearBit(PORTB_Reg,ChannelPos);
     19e:	48 b3       	in	r20, 0x18	; 24
     1a0:	21 e0       	ldi	r18, 0x01	; 1
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	b9 01       	movw	r22, r18
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Write+0x82>
     1a8:	66 0f       	add	r22, r22
     1aa:	77 1f       	adc	r23, r23
     1ac:	8a 95       	dec	r24
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Write+0x7e>
     1b0:	cb 01       	movw	r24, r22
     1b2:	80 95       	com	r24
     1b4:	84 23       	and	r24, r20
     1b6:	88 bb       	out	0x18, r24	; 24
     1b8:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if(Level == STD_High){
     1ba:	61 30       	cpi	r22, 0x01	; 1
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <DIO_Write+0xae>
			SetBit(PORTC_Reg,ChannelPos);
     1be:	45 b3       	in	r20, 0x15	; 21
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	b9 01       	movw	r22, r18
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Write+0xa2>
     1c8:	66 0f       	add	r22, r22
     1ca:	77 1f       	adc	r23, r23
     1cc:	8a 95       	dec	r24
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Write+0x9e>
     1d0:	cb 01       	movw	r24, r22
     1d2:	84 2b       	or	r24, r20
     1d4:	85 bb       	out	0x15, r24	; 21
     1d6:	08 95       	ret
		}
		else{
			ClearBit(PORTC_Reg,ChannelPos);
     1d8:	45 b3       	in	r20, 0x15	; 21
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	b9 01       	movw	r22, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_Write+0xbc>
     1e2:	66 0f       	add	r22, r22
     1e4:	77 1f       	adc	r23, r23
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_Write+0xb8>
     1ea:	cb 01       	movw	r24, r22
     1ec:	80 95       	com	r24
     1ee:	84 23       	and	r24, r20
     1f0:	85 bb       	out	0x15, r24	; 21
     1f2:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if(Level == STD_High){
     1f4:	61 30       	cpi	r22, 0x01	; 1
     1f6:	69 f4       	brne	.+26     	; 0x212 <DIO_Write+0xe8>
			SetBit(PORTD_Reg,ChannelPos);
     1f8:	42 b3       	in	r20, 0x12	; 18
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	b9 01       	movw	r22, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_Write+0xdc>
     202:	66 0f       	add	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_Write+0xd8>
     20a:	cb 01       	movw	r24, r22
     20c:	84 2b       	or	r24, r20
     20e:	82 bb       	out	0x12, r24	; 18
     210:	08 95       	ret
		}
		else{
			ClearBit(PORTD_Reg,ChannelPos);
     212:	42 b3       	in	r20, 0x12	; 18
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	b9 01       	movw	r22, r18
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_Write+0xf6>
     21c:	66 0f       	add	r22, r22
     21e:	77 1f       	adc	r23, r23
     220:	8a 95       	dec	r24
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_Write+0xf2>
     224:	cb 01       	movw	r24, r22
     226:	80 95       	com	r24
     228:	84 23       	and	r24, r20
     22a:	82 bb       	out	0x12, r24	; 18
     22c:	08 95       	ret

0000022e <DIO_Read>:
		break;
	}
}
STD_LevelTypes DIO_Read(DIO_ChannelTypes ChannelID){
	STD_LevelTypes Level = STD_Low;
	DIO_PortTypes Portx = ChannelID/8;
     22e:	98 2f       	mov	r25, r24
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
	DIO_ChannelTypes ChannelPos = ChannelID%8;
     236:	48 2f       	mov	r20, r24
     238:	47 70       	andi	r20, 0x07	; 7
	switch(Portx){
     23a:	91 30       	cpi	r25, 0x01	; 1
     23c:	81 f0       	breq	.+32     	; 0x25e <DIO_Read+0x30>
     23e:	28 f0       	brcs	.+10     	; 0x24a <DIO_Read+0x1c>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	b9 f0       	breq	.+46     	; 0x272 <DIO_Read+0x44>
     244:	93 30       	cpi	r25, 0x03	; 3
     246:	f9 f0       	breq	.+62     	; 0x286 <DIO_Read+0x58>
     248:	28 c0       	rjmp	.+80     	; 0x29a <DIO_Read+0x6c>
		case DIO_PortA:
		Level = GetBit(PINA_Reg,ChannelPos);
     24a:	99 b3       	in	r25, 0x19	; 25
     24c:	89 2f       	mov	r24, r25
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_Read+0x28>
     252:	95 95       	asr	r25
     254:	87 95       	ror	r24
     256:	4a 95       	dec	r20
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_Read+0x24>
     25a:	81 70       	andi	r24, 0x01	; 1
		break;
     25c:	08 95       	ret
		case DIO_PortB:
		Level = GetBit(PINB_Reg,ChannelPos);
     25e:	26 b3       	in	r18, 0x16	; 22
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	c9 01       	movw	r24, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Read+0x3c>
     266:	95 95       	asr	r25
     268:	87 95       	ror	r24
     26a:	4a 95       	dec	r20
     26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Read+0x38>
     26e:	81 70       	andi	r24, 0x01	; 1
		break;
     270:	08 95       	ret
		case DIO_PortC:
		Level = GetBit(PINC_Reg,ChannelPos);
     272:	23 b3       	in	r18, 0x13	; 19
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	c9 01       	movw	r24, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_Read+0x50>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	4a 95       	dec	r20
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_Read+0x4c>
     282:	81 70       	andi	r24, 0x01	; 1
		break;
     284:	08 95       	ret
		case DIO_PortD:
		Level = GetBit(PIND_Reg,ChannelPos);
     286:	20 b3       	in	r18, 0x10	; 16
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	c9 01       	movw	r24, r18
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_Read+0x64>
     28e:	95 95       	asr	r25
     290:	87 95       	ror	r24
     292:	4a 95       	dec	r20
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_Read+0x60>
     296:	81 70       	andi	r24, 0x01	; 1
		break;
     298:	08 95       	ret
		}
		break;
	}
}
STD_LevelTypes DIO_Read(DIO_ChannelTypes ChannelID){
	STD_LevelTypes Level = STD_Low;
     29a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		Level = GetBit(PIND_Reg,ChannelPos);
		break;
	}
	return Level;
}
     29c:	08 95       	ret

0000029e <DIO_Init>:
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	a0 c0       	rjmp	.+320    	; 0x3e2 <DIO_Init+0x144>
     2a2:	98 2f       	mov	r25, r24
     2a4:	96 95       	lsr	r25
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	28 2f       	mov	r18, r24
     2ac:	27 70       	andi	r18, 0x07	; 7
     2ae:	91 30       	cpi	r25, 0x01	; 1
     2b0:	61 f1       	breq	.+88     	; 0x30a <DIO_Init+0x6c>
     2b2:	38 f0       	brcs	.+14     	; 0x2c2 <DIO_Init+0x24>
     2b4:	92 30       	cpi	r25, 0x02	; 2
     2b6:	09 f4       	brne	.+2      	; 0x2ba <DIO_Init+0x1c>
     2b8:	4c c0       	rjmp	.+152    	; 0x352 <DIO_Init+0xb4>
     2ba:	93 30       	cpi	r25, 0x03	; 3
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <DIO_Init+0x22>
     2be:	6d c0       	rjmp	.+218    	; 0x39a <DIO_Init+0xfc>
     2c0:	8f c0       	rjmp	.+286    	; 0x3e0 <DIO_Init+0x142>
     2c2:	e8 2f       	mov	r30, r24
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	e0 5a       	subi	r30, 0xA0	; 160
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	90 81       	ld	r25, Z
     2d0:	91 30       	cpi	r25, 0x01	; 1
     2d2:	69 f4       	brne	.+26     	; 0x2ee <DIO_Init+0x50>
     2d4:	9a b3       	in	r25, 0x1a	; 26
     2d6:	41 e0       	ldi	r20, 0x01	; 1
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	ba 01       	movw	r22, r20
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_Init+0x44>
     2de:	66 0f       	add	r22, r22
     2e0:	77 1f       	adc	r23, r23
     2e2:	2a 95       	dec	r18
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_Init+0x40>
     2e6:	9b 01       	movw	r18, r22
     2e8:	29 2b       	or	r18, r25
     2ea:	2a bb       	out	0x1a, r18	; 26
     2ec:	79 c0       	rjmp	.+242    	; 0x3e0 <DIO_Init+0x142>
     2ee:	9a b3       	in	r25, 0x1a	; 26
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	ba 01       	movw	r22, r20
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_Init+0x5e>
     2f8:	66 0f       	add	r22, r22
     2fa:	77 1f       	adc	r23, r23
     2fc:	2a 95       	dec	r18
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_Init+0x5a>
     300:	9b 01       	movw	r18, r22
     302:	20 95       	com	r18
     304:	29 23       	and	r18, r25
     306:	2a bb       	out	0x1a, r18	; 26
     308:	6b c0       	rjmp	.+214    	; 0x3e0 <DIO_Init+0x142>
     30a:	e8 2f       	mov	r30, r24
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	e0 5a       	subi	r30, 0xA0	; 160
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	90 81       	ld	r25, Z
     318:	91 30       	cpi	r25, 0x01	; 1
     31a:	69 f4       	brne	.+26     	; 0x336 <DIO_Init+0x98>
     31c:	97 b3       	in	r25, 0x17	; 23
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	ba 01       	movw	r22, r20
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_Init+0x8c>
     326:	66 0f       	add	r22, r22
     328:	77 1f       	adc	r23, r23
     32a:	2a 95       	dec	r18
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_Init+0x88>
     32e:	9b 01       	movw	r18, r22
     330:	29 2b       	or	r18, r25
     332:	27 bb       	out	0x17, r18	; 23
     334:	55 c0       	rjmp	.+170    	; 0x3e0 <DIO_Init+0x142>
     336:	97 b3       	in	r25, 0x17	; 23
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	ba 01       	movw	r22, r20
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_Init+0xa6>
     340:	66 0f       	add	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	2a 95       	dec	r18
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_Init+0xa2>
     348:	9b 01       	movw	r18, r22
     34a:	20 95       	com	r18
     34c:	29 23       	and	r18, r25
     34e:	27 bb       	out	0x17, r18	; 23
     350:	47 c0       	rjmp	.+142    	; 0x3e0 <DIO_Init+0x142>
     352:	e8 2f       	mov	r30, r24
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e0 5a       	subi	r30, 0xA0	; 160
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	90 81       	ld	r25, Z
     360:	91 30       	cpi	r25, 0x01	; 1
     362:	69 f4       	brne	.+26     	; 0x37e <DIO_Init+0xe0>
     364:	94 b3       	in	r25, 0x14	; 20
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	ba 01       	movw	r22, r20
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_Init+0xd4>
     36e:	66 0f       	add	r22, r22
     370:	77 1f       	adc	r23, r23
     372:	2a 95       	dec	r18
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_Init+0xd0>
     376:	9b 01       	movw	r18, r22
     378:	29 2b       	or	r18, r25
     37a:	24 bb       	out	0x14, r18	; 20
     37c:	31 c0       	rjmp	.+98     	; 0x3e0 <DIO_Init+0x142>
     37e:	94 b3       	in	r25, 0x14	; 20
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	ba 01       	movw	r22, r20
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_Init+0xee>
     388:	66 0f       	add	r22, r22
     38a:	77 1f       	adc	r23, r23
     38c:	2a 95       	dec	r18
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_Init+0xea>
     390:	9b 01       	movw	r18, r22
     392:	20 95       	com	r18
     394:	29 23       	and	r18, r25
     396:	24 bb       	out	0x14, r18	; 20
     398:	23 c0       	rjmp	.+70     	; 0x3e0 <DIO_Init+0x142>
     39a:	e8 2f       	mov	r30, r24
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	e0 5a       	subi	r30, 0xA0	; 160
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	90 81       	ld	r25, Z
     3a8:	91 30       	cpi	r25, 0x01	; 1
     3aa:	69 f4       	brne	.+26     	; 0x3c6 <DIO_Init+0x128>
     3ac:	91 b3       	in	r25, 0x11	; 17
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	ba 01       	movw	r22, r20
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_Init+0x11c>
     3b6:	66 0f       	add	r22, r22
     3b8:	77 1f       	adc	r23, r23
     3ba:	2a 95       	dec	r18
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_Init+0x118>
     3be:	9b 01       	movw	r18, r22
     3c0:	29 2b       	or	r18, r25
     3c2:	21 bb       	out	0x11, r18	; 17
     3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <DIO_Init+0x142>
     3c6:	91 b3       	in	r25, 0x11	; 17
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	ba 01       	movw	r22, r20
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_Init+0x136>
     3d0:	66 0f       	add	r22, r22
     3d2:	77 1f       	adc	r23, r23
     3d4:	2a 95       	dec	r18
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_Init+0x132>
     3d8:	9b 01       	movw	r18, r22
     3da:	20 95       	com	r18
     3dc:	29 23       	and	r18, r25
     3de:	21 bb       	out	0x11, r18	; 17
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 32       	cpi	r24, 0x20	; 32
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <DIO_Init+0x14a>
     3e6:	5d cf       	rjmp	.-326    	; 0x2a2 <DIO_Init+0x4>
     3e8:	08 95       	ret

000003ea <EEPROM_ui8ReadByteFromAddress>:
     3ea:	e1 99       	sbic	0x1c, 1	; 28
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <EEPROM_ui8ReadByteFromAddress>
     3ee:	9f bb       	out	0x1f, r25	; 31
     3f0:	8e bb       	out	0x1e, r24	; 30
     3f2:	8c b3       	in	r24, 0x1c	; 28
     3f4:	81 60       	ori	r24, 0x01	; 1
     3f6:	8c bb       	out	0x1c, r24	; 28
     3f8:	8d b3       	in	r24, 0x1d	; 29
     3fa:	08 95       	ret

000003fc <EEPROM_vReadBlockFromAddress>:
     3fc:	dc 01       	movw	r26, r24
     3fe:	e1 99       	sbic	0x1c, 1	; 28
     400:	fe cf       	rjmp	.-4      	; 0x3fe <EEPROM_vReadBlockFromAddress+0x2>
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	0f c0       	rjmp	.+30     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     408:	f9 01       	movw	r30, r18
     40a:	ea 0f       	add	r30, r26
     40c:	fb 1f       	adc	r31, r27
     40e:	ff bb       	out	0x1f, r31	; 31
     410:	ee bb       	out	0x1e, r30	; 30
     412:	9c b3       	in	r25, 0x1c	; 28
     414:	91 60       	ori	r25, 0x01	; 1
     416:	9c bb       	out	0x1c, r25	; 28
     418:	fb 01       	movw	r30, r22
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	9d b3       	in	r25, 0x1d	; 29
     420:	90 83       	st	Z, r25
     422:	2f 5f       	subi	r18, 0xFF	; 255
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	24 17       	cp	r18, r20
     428:	35 07       	cpc	r19, r21
     42a:	70 f3       	brcs	.-36     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     42c:	08 95       	ret

0000042e <EEPROM_vWriteByteToAddress>:
     42e:	e1 99       	sbic	0x1c, 1	; 28
     430:	fe cf       	rjmp	.-4      	; 0x42e <EEPROM_vWriteByteToAddress>
     432:	9f bb       	out	0x1f, r25	; 31
     434:	8e bb       	out	0x1e, r24	; 30
     436:	8c b3       	in	r24, 0x1c	; 28
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	8c bb       	out	0x1c, r24	; 28
     43c:	8d b3       	in	r24, 0x1d	; 29
     43e:	86 17       	cp	r24, r22
     440:	39 f0       	breq	.+14     	; 0x450 <EEPROM_vWriteByteToAddress+0x22>
     442:	6d bb       	out	0x1d, r22	; 29
     444:	8c b3       	in	r24, 0x1c	; 28
     446:	84 60       	ori	r24, 0x04	; 4
     448:	8c bb       	out	0x1c, r24	; 28
     44a:	8c b3       	in	r24, 0x1c	; 28
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	8c bb       	out	0x1c, r24	; 28
     450:	08 95       	ret

00000452 <EEPROM_vWriteBlockToAddress>:
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	dc 01       	movw	r26, r24
     458:	ea 01       	movw	r28, r20
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	1a c0       	rjmp	.+52     	; 0x494 <EEPROM_vWriteBlockToAddress+0x42>
     460:	e1 99       	sbic	0x1c, 1	; 28
     462:	fe cf       	rjmp	.-4      	; 0x460 <EEPROM_vWriteBlockToAddress+0xe>
     464:	c9 01       	movw	r24, r18
     466:	8a 0f       	add	r24, r26
     468:	9b 1f       	adc	r25, r27
     46a:	9f bb       	out	0x1f, r25	; 31
     46c:	8e bb       	out	0x1e, r24	; 30
     46e:	9c b3       	in	r25, 0x1c	; 28
     470:	91 60       	ori	r25, 0x01	; 1
     472:	9c bb       	out	0x1c, r25	; 28
     474:	5d b3       	in	r21, 0x1d	; 29
     476:	fb 01       	movw	r30, r22
     478:	e2 0f       	add	r30, r18
     47a:	f3 1f       	adc	r31, r19
     47c:	90 81       	ld	r25, Z
     47e:	59 17       	cp	r21, r25
     480:	39 f0       	breq	.+14     	; 0x490 <EEPROM_vWriteBlockToAddress+0x3e>
     482:	9d bb       	out	0x1d, r25	; 29
     484:	9c b3       	in	r25, 0x1c	; 28
     486:	94 60       	ori	r25, 0x04	; 4
     488:	9c bb       	out	0x1c, r25	; 28
     48a:	9c b3       	in	r25, 0x1c	; 28
     48c:	92 60       	ori	r25, 0x02	; 2
     48e:	9c bb       	out	0x1c, r25	; 28
     490:	2f 5f       	subi	r18, 0xFF	; 255
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	2c 17       	cp	r18, r28
     496:	3d 07       	cpc	r19, r29
     498:	18 f3       	brcs	.-58     	; 0x460 <EEPROM_vWriteBlockToAddress+0xe>
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <ui8ComparePass>:
     4a0:	dc 01       	movw	r26, r24
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <ui8ComparePass+0x20>
     4a6:	29 2f       	mov	r18, r25
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	fd 01       	movw	r30, r26
     4ac:	e2 0f       	add	r30, r18
     4ae:	f3 1f       	adc	r31, r19
     4b0:	50 81       	ld	r21, Z
     4b2:	fb 01       	movw	r30, r22
     4b4:	e2 0f       	add	r30, r18
     4b6:	f3 1f       	adc	r31, r19
     4b8:	20 81       	ld	r18, Z
     4ba:	52 13       	cpse	r21, r18
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <ui8ComparePass+0x28>
     4be:	9f 5f       	subi	r25, 0xFF	; 255
     4c0:	94 17       	cp	r25, r20
     4c2:	88 f3       	brcs	.-30     	; 0x4a6 <ui8ComparePass+0x6>
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	08 95       	ret
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	08 95       	ret

000004cc <keypad_init>:
                    {'4','5','6'},
                    {'7','8','9'},
                    {'*','0','#'}};
Uint8 keyindic = 0;
void keypad_init()
{
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
	for(Uint8 x=0;x<3;x++)
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	10 c0       	rjmp	.+32     	; 0x4f6 <keypad_init+0x2a>
	{
		DIO_Write(keypad_row[x],STD_High);
     4d6:	c1 2f       	mov	r28, r17
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
     4da:	fe 01       	movw	r30, r28
     4dc:	e1 55       	subi	r30, 0x51	; 81
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	80 81       	ld	r24, Z
     4e4:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
		DIO_Write(keypad_col[x],STD_High);
     4e8:	c4 55       	subi	r28, 0x54	; 84
     4ea:	df 4f       	sbci	r29, 0xFF	; 255
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	88 81       	ld	r24, Y
     4f0:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
                    {'7','8','9'},
                    {'*','0','#'}};
Uint8 keyindic = 0;
void keypad_init()
{
	for(Uint8 x=0;x<3;x++)
     4f4:	1f 5f       	subi	r17, 0xFF	; 255
     4f6:	13 30       	cpi	r17, 0x03	; 3
     4f8:	70 f3       	brcs	.-36     	; 0x4d6 <keypad_init+0xa>
	{
		DIO_Write(keypad_row[x],STD_High);
		DIO_Write(keypad_col[x],STD_High);
	}
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	08 95       	ret

00000502 <PrintKey>:
Uint8 PrintKey(void)
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	for (Uint8 i=0;i<4;i++)
     50e:	d0 e0       	ldi	r29, 0x00	; 0
     510:	34 c0       	rjmp	.+104    	; 0x57a <PrintKey+0x78>
	{
		DIO_Write(keypad_row[i],STD_Low);
     512:	ed 2e       	mov	r14, r29
     514:	f1 2c       	mov	r15, r1
     516:	f7 01       	movw	r30, r14
     518:	e1 55       	subi	r30, 0x51	; 81
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
		for (Uint8 j=0;j<3;j++)
     524:	c0 e0       	ldi	r28, 0x00	; 0
     526:	1f c0       	rjmp	.+62     	; 0x566 <PrintKey+0x64>
		{
			if(DIO_Read(keypad_col[j])==STD_Low)
     528:	0c 2f       	mov	r16, r28
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f8 01       	movw	r30, r16
     52e:	e4 55       	subi	r30, 0x54	; 84
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	80 81       	ld	r24, Z
     534:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_Read>
     538:	81 11       	cpse	r24, r1
     53a:	14 c0       	rjmp	.+40     	; 0x564 <PrintKey+0x62>
			{
				while(DIO_Read(keypad_col[j])==STD_Low);
     53c:	f8 01       	movw	r30, r16
     53e:	e4 55       	subi	r30, 0x54	; 84
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	80 81       	ld	r24, Z
     544:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_Read>
     548:	88 23       	and	r24, r24
     54a:	c1 f3       	breq	.-16     	; 0x53c <PrintKey+0x3a>
				return keypad[i][j];
     54c:	c7 01       	movw	r24, r14
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	8e 0d       	add	r24, r14
     554:	9f 1d       	adc	r25, r15
     556:	80 56       	subi	r24, 0x60	; 96
     558:	9f 4f       	sbci	r25, 0xFF	; 255
     55a:	fc 01       	movw	r30, r24
     55c:	e0 0f       	add	r30, r16
     55e:	f1 1f       	adc	r31, r17
     560:	80 81       	ld	r24, Z
     562:	0e c0       	rjmp	.+28     	; 0x580 <PrintKey+0x7e>
Uint8 PrintKey(void)
{
	for (Uint8 i=0;i<4;i++)
	{
		DIO_Write(keypad_row[i],STD_Low);
		for (Uint8 j=0;j<3;j++)
     564:	cf 5f       	subi	r28, 0xFF	; 255
     566:	c3 30       	cpi	r28, 0x03	; 3
     568:	f8 f2       	brcs	.-66     	; 0x528 <PrintKey+0x26>
			{
				while(DIO_Read(keypad_col[j])==STD_Low);
				return keypad[i][j];
			}
		}
		DIO_Write(keypad_row[i],STD_High);
     56a:	f7 01       	movw	r30, r14
     56c:	e1 55       	subi	r30, 0x51	; 81
     56e:	ff 4f       	sbci	r31, 0xFF	; 255
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	80 81       	ld	r24, Z
     574:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
		DIO_Write(keypad_col[x],STD_High);
	}
}
Uint8 PrintKey(void)
{
	for (Uint8 i=0;i<4;i++)
     578:	df 5f       	subi	r29, 0xFF	; 255
     57a:	d4 30       	cpi	r29, 0x04	; 4
     57c:	50 f2       	brcs	.-108    	; 0x512 <PrintKey+0x10>
		DIO_Write(keypad_row[i],STD_High);
		
		
		
	}
	return 0;
     57e:	80 e0       	ldi	r24, 0x00	; 0
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	08 95       	ret

0000058e <keypad_checkpress>:

Uint8 keypad_checkpress()
{
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	Uint8 returnval=notpressed;
	Uint8 row;
	Uint8 col;
	for(row=0;row<4;row++)
     59a:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

Uint8 keypad_checkpress()
{
	Uint8 returnval=notpressed;
     59c:	ff 24       	eor	r15, r15
     59e:	fa 94       	dec	r15
	Uint8 row;
	Uint8 col;
	for(row=0;row<4;row++)
     5a0:	3e c0       	rjmp	.+124    	; 0x61e <keypad_checkpress+0x90>
		DIO_Write(DIO_ChannelC2,1);
		DIO_Write(DIO_ChannelC3,1);
		*/
		
		//_delay_ms(20);
		DIO_Write(keypad_row[row],STD_Low);
     5a2:	0d 2f       	mov	r16, r29
     5a4:	10 e0       	ldi	r17, 0x00	; 0
     5a6:	f8 01       	movw	r30, r16
     5a8:	e1 55       	subi	r30, 0x51	; 81
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	89 ef       	ldi	r24, 0xF9	; 249
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	90 40       	sbci	r25, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <keypad_checkpress+0x2c>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <keypad_checkpress+0x36>
     5c4:	00 00       	nop
		_delay_ms(20);
		for (col=0;col<3;col++)
     5c6:	c0 e0       	ldi	r28, 0x00	; 0
     5c8:	20 c0       	rjmp	.+64     	; 0x60a <keypad_checkpress+0x7c>
		{//'C'
			keyindic= DIO_u8read('C', (col+4));
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	6c 0f       	add	r22, r28
     5ce:	83 e4       	ldi	r24, 0x43	; 67
     5d0:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_u8read>
     5d4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
			if (keyindic==0)
     5d8:	81 11       	cpse	r24, r1
     5da:	16 c0       	rjmp	.+44     	; 0x608 <keypad_checkpress+0x7a>
			{
				while(DIO_Read(keypad_col[col]) == STD_Low);
     5dc:	ec 2e       	mov	r14, r28
     5de:	f1 2c       	mov	r15, r1
     5e0:	f7 01       	movw	r30, r14
     5e2:	e4 55       	subi	r30, 0x54	; 84
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	80 81       	ld	r24, Z
     5e8:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_Read>
     5ec:	88 23       	and	r24, r24
     5ee:	b1 f3       	breq	.-20     	; 0x5dc <keypad_checkpress+0x4e>
				returnval=keypad[row][col];
     5f0:	c8 01       	movw	r24, r16
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	80 0f       	add	r24, r16
     5f8:	91 1f       	adc	r25, r17
     5fa:	80 56       	subi	r24, 0x60	; 96
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	fc 01       	movw	r30, r24
     600:	ee 0d       	add	r30, r14
     602:	ff 1d       	adc	r31, r15
     604:	f0 80       	ld	r15, Z
				break;
     606:	03 c0       	rjmp	.+6      	; 0x60e <keypad_checkpress+0x80>
		*/
		
		//_delay_ms(20);
		DIO_Write(keypad_row[row],STD_Low);
		_delay_ms(20);
		for (col=0;col<3;col++)
     608:	cf 5f       	subi	r28, 0xFF	; 255
     60a:	c3 30       	cpi	r28, 0x03	; 3
     60c:	f0 f2       	brcs	.-68     	; 0x5ca <keypad_checkpress+0x3c>
				while(DIO_Read(keypad_col[col]) == STD_Low);
				returnval=keypad[row][col];
				break;
			}
		}
		DIO_Write(keypad_row[row],STD_High);
     60e:	f8 01       	movw	r30, r16
     610:	e1 55       	subi	r30, 0x51	; 81
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	80 81       	ld	r24, Z
     618:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
Uint8 keypad_checkpress()
{
	Uint8 returnval=notpressed;
	Uint8 row;
	Uint8 col;
	for(row=0;row<4;row++)
     61c:	df 5f       	subi	r29, 0xFF	; 255
     61e:	d4 30       	cpi	r29, 0x04	; 4
     620:	08 f4       	brcc	.+2      	; 0x624 <keypad_checkpress+0x96>
     622:	bf cf       	rjmp	.-130    	; 0x5a2 <keypad_checkpress+0x14>
		}
		DIO_Write(keypad_row[row],STD_High);
		
	}
	return returnval;
}
     624:	8f 2d       	mov	r24, r15
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	08 95       	ret

00000634 <LCD_Cmd>:
	LCD_Cmd(0x0C);//display on
	LCD_Cmd(0X01); //CLEAR DISPLAY
	_delay_ms(3);
}
void LCD_Cmd(Uint8 cmd)
{
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
	LCD_DataPort=(LCD_DataPort&0x0F)|(cmd&0xF0);
     638:	8b b3       	in	r24, 0x1b	; 27
     63a:	8f 70       	andi	r24, 0x0F	; 15
     63c:	9c 2f       	mov	r25, r28
     63e:	90 7f       	andi	r25, 0xF0	; 240
     640:	89 2b       	or	r24, r25
     642:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_Low);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	89 e0       	ldi	r24, 0x09	; 9
     648:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	DIO_Write(E,STD_Low);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     654:	87 ec       	ldi	r24, 0xC7	; 199
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <LCD_Cmd+0x24>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <LCD_Cmd+0x2a>
     65e:	00 00       	nop
	_delay_us(50);
	DIO_Write(E,STD_High);
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	29 ef       	ldi	r18, 0xF9	; 249
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	91 50       	subi	r25, 0x01	; 1
     670:	20 40       	sbci	r18, 0x00	; 0
     672:	30 40       	sbci	r19, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <LCD_Cmd+0x3a>
     676:	00 c0       	rjmp	.+0      	; 0x678 <LCD_Cmd+0x44>
     678:	00 00       	nop
	_delay_ms(20);
	
	LCD_DataPort=(LCD_DataPort&0x0F)|(cmd<<4);
     67a:	2b b3       	in	r18, 0x1b	; 27
     67c:	30 e1       	ldi	r19, 0x10	; 16
     67e:	c3 9f       	mul	r28, r19
     680:	c0 01       	movw	r24, r0
     682:	11 24       	eor	r1, r1
     684:	92 2f       	mov	r25, r18
     686:	9f 70       	andi	r25, 0x0F	; 15
     688:	89 2b       	or	r24, r25
     68a:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_Low);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	89 e0       	ldi	r24, 0x09	; 9
     690:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	DIO_Write(E,STD_Low);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     69c:	87 ec       	ldi	r24, 0xC7	; 199
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_Cmd+0x6c>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_Cmd+0x72>
     6a6:	00 00       	nop
	_delay_us(50);
	DIO_Write(E,STD_High);
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	88 e0       	ldi	r24, 0x08	; 8
     6ac:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b0:	8f e1       	ldi	r24, 0x1F	; 31
     6b2:	9e e4       	ldi	r25, 0x4E	; 78
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_Cmd+0x80>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <LCD_Cmd+0x86>
     6ba:	00 00       	nop
	_delay_ms(5);
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <LCD_Init>:
     6c0:	2f e7       	ldi	r18, 0x7F	; 127
     6c2:	85 eb       	ldi	r24, 0xB5	; 181
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <LCD_Init+0x6>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_Init+0x10>
     6d0:	00 00       	nop
#include "DIO.h"
void LCD_Init()
{
	
	_delay_ms(35);
	DIO_Write(RW,STD_Low);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	DIO_Write(RS,STD_Low);
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	89 e0       	ldi	r24, 0x09	; 9
     6de:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	LCD_Cmd(0x33);
     6e2:	83 e3       	ldi	r24, 0x33	; 51
     6e4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	8f e8       	ldi	r24, 0x8F	; 143
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_Init+0x2c>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_Init+0x32>
     6f2:	00 00       	nop
	_delay_us(100);
	LCD_Cmd(0X32);//lcd init
     6f4:	82 e3       	ldi	r24, 0x32	; 50
     6f6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	LCD_Cmd(0X28);//function set
     6fa:	88 e2       	ldi	r24, 0x28	; 40
     6fc:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	LCD_Cmd(0x06);//ENTTRY MODE SET
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	LCD_Cmd(0x0C);//display on
     706:	8c e0       	ldi	r24, 0x0C	; 12
     708:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	LCD_Cmd(0X01); //CLEAR DISPLAY
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     712:	8f ed       	ldi	r24, 0xDF	; 223
     714:	9e e2       	ldi	r25, 0x2E	; 46
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <LCD_Init+0x56>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <LCD_Init+0x5c>
     71c:	00 00       	nop
     71e:	08 95       	ret

00000720 <LCD_Char>:
	_delay_us(50);
	DIO_Write(E,STD_High);
	_delay_ms(5);
}
void LCD_Char(Uint8 data)
{
     720:	cf 93       	push	r28
     722:	c8 2f       	mov	r28, r24
	LCD_DataPort=(LCD_DataPort&0x0F)|(data&0xF0);
     724:	8b b3       	in	r24, 0x1b	; 27
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	9c 2f       	mov	r25, r28
     72a:	90 7f       	andi	r25, 0xF0	; 240
     72c:	89 2b       	or	r24, r25
     72e:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_High);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	89 e0       	ldi	r24, 0x09	; 9
     734:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	DIO_Write(E,STD_Low);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	88 e0       	ldi	r24, 0x08	; 8
     73c:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	87 ec       	ldi	r24, 0xC7	; 199
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <LCD_Char+0x24>
     748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_Char+0x2a>
     74a:	00 00       	nop
	_delay_us(50);
	DIO_Write(E,STD_High);
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     754:	8f e1       	ldi	r24, 0x1F	; 31
     756:	9e e4       	ldi	r25, 0x4E	; 78
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_Char+0x38>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_Char+0x3e>
     75e:	00 00       	nop
	_delay_ms(5);
	
	LCD_DataPort=(LCD_DataPort&0x0F)|(data<<4);
     760:	2b b3       	in	r18, 0x1b	; 27
     762:	30 e1       	ldi	r19, 0x10	; 16
     764:	c3 9f       	mul	r28, r19
     766:	c0 01       	movw	r24, r0
     768:	11 24       	eor	r1, r1
     76a:	92 2f       	mov	r25, r18
     76c:	9f 70       	andi	r25, 0x0F	; 15
     76e:	89 2b       	or	r24, r25
     770:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_High);
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	89 e0       	ldi	r24, 0x09	; 9
     776:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	DIO_Write(E,STD_Low);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	88 e0       	ldi	r24, 0x08	; 8
     77e:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     782:	87 ec       	ldi	r24, 0xC7	; 199
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <LCD_Char+0x66>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_Char+0x6c>
     78c:	00 00       	nop
	_delay_us(50);
	DIO_Write(E,STD_High);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     796:	8f e1       	ldi	r24, 0x1F	; 31
     798:	9e e4       	ldi	r25, 0x4E	; 78
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_Char+0x7a>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_Char+0x80>
     7a0:	00 00       	nop
	_delay_ms(5);
}
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <LCD_String>:
void LCD_String(int8 * string)
{
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	8c 01       	movw	r16, r24
	Uint8 i=0;
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i]!= '\0')
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <LCD_String+0x12>
	{
		LCD_Char(string[i]);
     7b2:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
		i++;
     7b6:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(5);
}
void LCD_String(int8 * string)
{
	Uint8 i=0;
	while(string[i]!= '\0')
     7b8:	f8 01       	movw	r30, r16
     7ba:	ec 0f       	add	r30, r28
     7bc:	f1 1d       	adc	r31, r1
     7be:	80 81       	ld	r24, Z
     7c0:	81 11       	cpse	r24, r1
     7c2:	f7 cf       	rjmp	.-18     	; 0x7b2 <LCD_String+0xc>
	{
		LCD_Char(string[i]);
		i++;
	}
}
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <LCD_movecursor>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <LCD_movecursor+0xa>
	{
		data=0x80+coloumn-1 ;
     7d0:	8f e7       	ldi	r24, 0x7F	; 127
     7d2:	86 0f       	add	r24, r22
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <LCD_movecursor+0x16>
	}
	else if (row==2)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <LCD_movecursor+0x14>
	{
		data=0xc0+coloumn-1;
     7da:	8f eb       	ldi	r24, 0xBF	; 191
     7dc:	86 0f       	add	r24, r22
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <LCD_movecursor+0x16>
     7e0:	80 e8       	ldi	r24, 0x80	; 128
	}
	/**************************************/
	
	LCD_Cmd(data); //set the position  of the cursor
     7e2:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
     7e6:	08 95       	ret

000007e8 <main>:
volatile unsigned char UartV=0;
uint8 timeout_flag = FALSE;
volatile uint16 session_counter = 0;
#include <avr/interrupt.h>
int main(void)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	28 97       	sbiw	r28, 0x08	; 8
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
	sei();
     7fc:	78 94       	sei
	Timer1_ServoPWM();
     7fe:	0e 94 b9 07 	call	0xf72	; 0xf72 <Timer1_ServoPWM>
	Timer2_PhasePWM();
     802:	0e 94 d6 07 	call	0xfac	; 0xfac <Timer2_PhasePWM>
	UART_Init();
     806:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_Init>
	Servo(0);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	cb 01       	movw	r24, r22
     810:	0e 94 c1 07 	call	0xf82	; 0xf82 <Servo>
	DIO_Init();
     814:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init>
	LCD_Init();
     818:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Init>
	keypad_init();
     81c:	0e 94 66 02 	call	0x4cc	; 0x4cc <keypad_init>
	Uint8 data=0;
	//_________motorPWM__________//
	DDRD |= (1<<5);
     820:	81 b3       	in	r24, 0x11	; 17
     822:	80 62       	ori	r24, 0x20	; 32
     824:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1<<5)|(1<<6)|(1<<7);
     826:	87 b3       	in	r24, 0x17	; 23
     828:	80 6e       	ori	r24, 0xE0	; 224
     82a:	87 bb       	out	0x17, r24	; 23
	TCCR1A = (1<<COM1A1)|(1<<WGM11);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11)|(1<<CS10);//divide CLK by 64 - FastPWM - Non Inverting
	ICR1 = 1000;
	*/
	//_________ADC__________//
	ADC_Init();
     82c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	//Timer1_ServoPWM();
	//Servo(0);
	ICR1 = 5000;
     830:	88 e8       	ldi	r24, 0x88	; 136
     832:	93 e1       	ldi	r25, 0x13	; 19
     834:	97 bd       	out	0x27, r25	; 39
     836:	86 bd       	out	0x26, r24	; 38
	//________LAMPS___________//
	DDRD |=(1<<2);
     838:	81 b3       	in	r24, 0x11	; 17
     83a:	84 60       	ori	r24, 0x04	; 4
     83c:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<3);
     83e:	81 b3       	in	r24, 0x11	; 17
     840:	88 60       	ori	r24, 0x08	; 8
     842:	81 bb       	out	0x11, r24	; 17



	unsigned short Temperature = 0;
	int Pot_Val = 0;
	DDRA |= (1<<1);
     844:	8a b3       	in	r24, 0x1a	; 26
     846:	82 60       	ori	r24, 0x02	; 2
     848:	8a bb       	out	0x1a, r24	; 26
	char array[10];
	
	
	uint8 login_mode = UartV;
     84a:	f0 90 e2 01 	lds	r15, 0x01E2	; 0x8001e2 <UartV>
	uint8 block_mode_flag = FALSE;
	uint8 key_pressed = notpressed;
	LCD_String("welcome to smart");
     84e:	83 eb       	ldi	r24, 0xB3	; 179
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
	LCD_movecursor(2,1);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
	LCD_String("home system");
     85e:	84 ec       	ldi	r24, 0xC4	; 196
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	33 ed       	ldi	r19, 0xD3	; 211
     86a:	80 e3       	ldi	r24, 0x30	; 48
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	30 40       	sbci	r19, 0x00	; 0
     870:	80 40       	sbci	r24, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
     874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
     876:	00 00       	nop
	_delay_ms(1000);
	LCD_Cmd(0X01);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	if ((EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET)||(EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET))
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EEPROM_ui8ReadByteFromAddress>
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	39 f4       	brne	.+14     	; 0x898 <__stack+0x39>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EEPROM_ui8ReadByteFromAddress>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	09 f4       	brne	.+2      	; 0x898 <__stack+0x39>
     896:	d1 c0       	rjmp	.+418    	; 0xa3a <__stack+0x1db>
	
	{
		LCD_String("LOGIN FOR");
     898:	80 ed       	ldi	r24, 0xD0	; 208
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
		LCD_movecursor(2,1);
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
		LCD_String("FIRST TIME");
     8a8:	8a ed       	ldi	r24, 0xDA	; 218
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     8b0:	9f ef       	ldi	r25, 0xFF	; 255
     8b2:	23 ed       	ldi	r18, 0xD3	; 211
     8b4:	30 e3       	ldi	r19, 0x30	; 48
     8b6:	91 50       	subi	r25, 0x01	; 1
     8b8:	20 40       	sbci	r18, 0x00	; 0
     8ba:	30 40       	sbci	r19, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__stack+0x57>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__stack+0x61>
     8c0:	00 00       	nop
		_delay_ms(1000);
		LCD_Cmd(0X01);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
		/*ADMIN*/
		LCD_String("SET ADMIN PASS");
     8c8:	85 ee       	ldi	r24, 0xE5	; 229
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
		LCD_movecursor(2,1);
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
		LCD_String("ADMIN PASS");
     8d8:	89 ee       	ldi	r24, 0xE9	; 233
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
		/*SET ADMIN PASS*/
		Uint8 PASS_COUNTER=0;
		Uint8 PASS[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	8a 83       	std	Y+2, r24	; 0x02
     8e6:	8b 83       	std	Y+3, r24	; 0x03
     8e8:	8c 83       	std	Y+4, r24	; 0x04
		/*ADMIN*/
		LCD_String("SET ADMIN PASS");
		LCD_movecursor(2,1);
		LCD_String("ADMIN PASS");
		/*SET ADMIN PASS*/
		Uint8 PASS_COUNTER=0;
     8ea:	10 e0       	ldi	r17, 0x00	; 0
		Uint8 PASS[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
		while (PASS_COUNTER<PASS_SIZE)
     8ec:	2a c0       	rjmp	.+84     	; 0x942 <__stack+0xe3>
		{
			key_pressed =notpressed;
			while(key_pressed==notpressed){
				key_pressed = keypad_checkpress();
     8ee:	0e 94 c7 02 	call	0x58e	; 0x58e <keypad_checkpress>
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <__stack+0x97>
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
		Uint8 PASS_COUNTER=0;
		Uint8 PASS[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
		while (PASS_COUNTER<PASS_SIZE)
		{
			key_pressed =notpressed;
			while(key_pressed==notpressed){
     8f6:	8f 3f       	cpi	r24, 0xFF	; 255
     8f8:	d1 f3       	breq	.-12     	; 0x8ee <__stack+0x8f>
				key_pressed = keypad_checkpress();
			}
			PASS[PASS_COUNTER]=key_pressed;
     8fa:	e1 e0       	ldi	r30, 0x01	; 1
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ec 0f       	add	r30, r28
     900:	fd 1f       	adc	r31, r29
     902:	e1 0f       	add	r30, r17
     904:	f1 1d       	adc	r31, r1
     906:	80 83       	st	Z, r24
			LCD_Char(key_pressed);
     908:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	95 ea       	ldi	r25, 0xA5	; 165
     910:	2e e0       	ldi	r18, 0x0E	; 14
     912:	81 50       	subi	r24, 0x01	; 1
     914:	90 40       	sbci	r25, 0x00	; 0
     916:	20 40       	sbci	r18, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0xb3>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0xbd>
     91c:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);
			LCD_movecursor(2,12+PASS_COUNTER);
     91e:	6c e0       	ldi	r22, 0x0C	; 12
     920:	61 0f       	add	r22, r17
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
			LCD_Char(PASSWORD_SYMBOL);
     928:	8a e2       	ldi	r24, 0x2A	; 42
     92a:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	81 ee       	ldi	r24, 0xE1	; 225
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	31 50       	subi	r19, 0x01	; 1
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	90 40       	sbci	r25, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
     93e:	00 00       	nop
			_delay_ms(100);
			PASS_COUNTER++;
     940:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_movecursor(2,1);
		LCD_String("ADMIN PASS");
		/*SET ADMIN PASS*/
		Uint8 PASS_COUNTER=0;
		Uint8 PASS[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
		while (PASS_COUNTER<PASS_SIZE)
     942:	14 30       	cpi	r17, 0x04	; 4
     944:	b8 f2       	brcs	.-82     	; 0x8f4 <__stack+0x95>
			LCD_Char(PASSWORD_SYMBOL);
			_delay_ms(100);
			PASS_COUNTER++;
		}
		
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,PASS,PASS_SIZE);
     946:	44 e0       	ldi	r20, 0x04	; 4
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 29 02 	call	0x452	; 0x452 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 17 02 	call	0x42e	; 0x42e <EEPROM_vWriteByteToAddress>
		LCD_Cmd(0X01);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
     968:	2f ef       	ldi	r18, 0xFF	; 255
     96a:	39 e6       	ldi	r19, 0x69	; 105
     96c:	88 e1       	ldi	r24, 0x18	; 24
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	30 40       	sbci	r19, 0x00	; 0
     972:	80 40       	sbci	r24, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <__stack+0x10f>
     976:	00 c0       	rjmp	.+0      	; 0x978 <__stack+0x119>
     978:	00 00       	nop
		_delay_ms(500);
		LCD_Cmd(0x01);
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
		
		
		
		
		PASS_COUNTER=0;
		LCD_String("Set Guest Pass");
     980:	84 ef       	ldi	r24, 0xF4	; 244
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
		LCD_movecursor(2,1);
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
		LCD_String("Guest Pass:");
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
		LCD_Cmd(0x01);
		
		
		
		
		PASS_COUNTER=0;
     998:	10 e0       	ldi	r17, 0x00	; 0
		LCD_String("Set Guest Pass");
		LCD_movecursor(2,1);
		LCD_String("Guest Pass:");
		while (PASS_COUNTER<PASS_SIZE)//loop till the user finish inserting the pass
     99a:	2a c0       	rjmp	.+84     	; 0x9f0 <__stack+0x191>
		{
			key_pressed = notpressed;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == notpressed)//repeat till the user press any key
			{
				key_pressed = keypad_checkpress();//if the user pressed any button in keypad save the value in key_pressed
     99c:	0e 94 c7 02 	call	0x58e	; 0x58e <keypad_checkpress>
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <__stack+0x145>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
		LCD_movecursor(2,1);
		LCD_String("Guest Pass:");
		while (PASS_COUNTER<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = notpressed;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == notpressed)//repeat till the user press any key
     9a4:	8f 3f       	cpi	r24, 0xFF	; 255
     9a6:	d1 f3       	breq	.-12     	; 0x99c <__stack+0x13d>
			{
				key_pressed = keypad_checkpress();//if the user pressed any button in keypad save the value in key_pressed
			}

			PASS[PASS_COUNTER]=key_pressed;//add the entered character to the pass array
     9a8:	e1 e0       	ldi	r30, 0x01	; 1
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ec 0f       	add	r30, r28
     9ae:	fd 1f       	adc	r31, r29
     9b0:	e1 0f       	add	r30, r17
     9b2:	f1 1d       	adc	r31, r1
     9b4:	80 83       	st	Z, r24
			LCD_Char(key_pressed);//print the entered character
     9b6:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	25 ea       	ldi	r18, 0xA5	; 165
     9be:	3e e0       	ldi	r19, 0x0E	; 14
     9c0:	91 50       	subi	r25, 0x01	; 1
     9c2:	20 40       	sbci	r18, 0x00	; 0
     9c4:	30 40       	sbci	r19, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <__stack+0x161>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <__stack+0x16b>
     9ca:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+PASS_COUNTER);//move the lcd cursor to the previous location to write the password symbol over the character
     9cc:	6c e0       	ldi	r22, 0x0C	; 12
     9ce:	61 0f       	add	r22, r17
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
     9d6:	8a e2       	ldi	r24, 0x2A	; 42
     9d8:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	91 ee       	ldi	r25, 0xE1	; 225
     9e0:	24 e0       	ldi	r18, 0x04	; 4
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	90 40       	sbci	r25, 0x00	; 0
     9e6:	20 40       	sbci	r18, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <__stack+0x183>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <__stack+0x18d>
     9ec:	00 00       	nop
			_delay_ms(100);//Halt the system for the given time in (ms)
			PASS_COUNTER++;//increase the characters count
     9ee:	1f 5f       	subi	r17, 0xFF	; 255
		
		PASS_COUNTER=0;
		LCD_String("Set Guest Pass");
		LCD_movecursor(2,1);
		LCD_String("Guest Pass:");
		while (PASS_COUNTER<PASS_SIZE)//loop till the user finish inserting the pass
     9f0:	14 30       	cpi	r17, 0x04	; 4
     9f2:	b8 f2       	brcs	.-82     	; 0x9a2 <__stack+0x143>
			LCD_movecursor(2,12+PASS_COUNTER);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			PASS_COUNTER++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,PASS,PASS_SIZE);//save the entire password as a block to the EEPROM
     9f4:	44 e0       	ldi	r20, 0x04	; 4
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	86 e0       	ldi	r24, 0x06	; 6
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 29 02 	call	0x452	; 0x452 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 17 02 	call	0x42e	; 0x42e <EEPROM_vWriteByteToAddress>
		LCD_Cmd(0x01);//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
		LCD_String("Pass Saved");//move the lcd cursor to the previous location
     a16:	8f e0       	ldi	r24, 0x0F	; 15
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     a1e:	3f ef       	ldi	r19, 0xFF	; 255
     a20:	89 e6       	ldi	r24, 0x69	; 105
     a22:	98 e1       	ldi	r25, 0x18	; 24
     a24:	31 50       	subi	r19, 0x01	; 1
     a26:	80 40       	sbci	r24, 0x00	; 0
     a28:	90 40       	sbci	r25, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <__stack+0x1c5>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <__stack+0x1cf>
     a2e:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_Cmd(0x01);//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
	DDRA |= (1<<1);
	char array[10];
	
	
	uint8 login_mode = UartV;
	uint8 block_mode_flag = FALSE;
     a36:	e1 2c       	mov	r14, r1
	LCD_String("home system");
	_delay_ms(1000);
	LCD_Cmd(0X01);
	if ((EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET)||(EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET))
	
	{
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <__stack+0x1e5>
		
		
		
	}
	else{
		block_mode_flag=EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS);
     a3a:	8a e0       	ldi	r24, 0x0A	; 10
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EEPROM_ui8ReadByteFromAddress>
     a42:	e8 2e       	mov	r14, r24
	}
	

	while (1)
	{
		Temperature = ADC_Read(0);
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
		Temperature = Temperature/4;
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	96 95       	lsr	r25
     a50:	87 95       	ror	r24
		
		
		if (Temperature >= 28)
     a52:	8c 31       	cpi	r24, 0x1C	; 28
     a54:	91 05       	cpc	r25, r1
     a56:	38 f0       	brcs	.+14     	; 0xa66 <__stack+0x207>
		{
			
			PORTB |= (1<<6)|(1<<7);
     a58:	88 b3       	in	r24, 0x18	; 24
     a5a:	80 6c       	ori	r24, 0xC0	; 192
     a5c:	88 bb       	out	0x18, r24	; 24
			PORTB &=~ (1<<5);
     a5e:	88 b3       	in	r24, 0x18	; 24
     a60:	8f 7d       	andi	r24, 0xDF	; 223
     a62:	88 bb       	out	0x18, r24	; 24
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__stack+0x211>
			//LCD_String("AC ON");
			//_delay_ms(200);
			//LCD_Cmd(0x01);
		}
		else if (Temperature <= 21)
     a66:	46 97       	sbiw	r24, 0x16	; 22
     a68:	18 f4       	brcc	.+6      	; 0xa70 <__stack+0x211>
		{
			PORTB &=~ (1<<7);
     a6a:	88 b3       	in	r24, 0x18	; 24
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	88 bb       	out	0x18, r24	; 24
		}
		
		Pot_Val = ADC_Read(2);
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
		Pot_Val = Pot_Val/4;
     a76:	9c 01       	movw	r18, r24
     a78:	99 23       	and	r25, r25
     a7a:	14 f4       	brge	.+4      	; 0xa80 <__stack+0x221>
     a7c:	2d 5f       	subi	r18, 0xFD	; 253
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
		PWM_duty_Timer2(Pot_Val);
     a80:	c9 01       	movw	r24, r18
     a82:	95 95       	asr	r25
     a84:	87 95       	ror	r24
     a86:	95 95       	asr	r25
     a88:	87 95       	ror	r24
     a8a:	0e 94 dd 07 	call	0xfba	; 0xfba <PWM_duty_Timer2>
		
		
		
		key_pressed=notpressed;
		uint8 pass_tries=0;
		if (timeout_flag==TRUE)
     a8e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <timeout_flag>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	c9 f4       	brne	.+50     	; 0xac8 <__stack+0x269>
		{
			timer0_stop();
     a96:	0e 94 f5 07 	call	0xfea	; 0xfea <timer0_stop>
			session_counter=0;
     a9a:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <session_counter+0x1>
     a9e:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <session_counter>
			timeout_flag=FALSE;
     aa2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <timeout_flag>
			login_mode=NO_MODE;
			key_pressed=notpressed;
			LCD_Cmd(0x01);
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
			LCD_String("session time out");
     aac:	8a e1       	ldi	r24, 0x1A	; 26
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     ab4:	2f ef       	ldi	r18, 0xFF	; 255
     ab6:	33 ed       	ldi	r19, 0xD3	; 211
     ab8:	80 e3       	ldi	r24, 0x30	; 48
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	30 40       	sbci	r19, 0x00	; 0
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <__stack+0x25b>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <__stack+0x265>
     ac4:	00 00       	nop
		if (timeout_flag==TRUE)
		{
			timer0_stop();
			session_counter=0;
			timeout_flag=FALSE;
			login_mode=NO_MODE;
     ac6:	f1 2c       	mov	r15, r1
			}
			if (key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE)
			{
				LCD_Cmd(0x01);
				LCD_String("wrong input");
				key_pressed=notpressed;
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	1f ef       	ldi	r17, 0xFF	; 255
     acc:	b7 c1       	rjmp	.+878    	; 0xe3c <__stack+0x5dd>
			LCD_String("session time out");
			_delay_ms(1000);
		}
		while (login_mode==NO_MODE)
		{
			if (block_mode_flag==TRUE)
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	e9 12       	cpse	r14, r25
     ad2:	22 c0       	rjmp	.+68     	; 0xb18 <__stack+0x2b9>
			{
				LCD_Cmd(0x01);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
				LCD_String("login blocked");
     ada:	8b e2       	ldi	r24, 0x2B	; 43
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
				LCD_movecursor(2,1);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
				LCD_String("wait 20 second");
     aea:	89 e3       	ldi	r24, 0x39	; 57
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     af2:	24 e5       	ldi	r18, 0x54	; 84
     af4:	3d ec       	ldi	r19, 0xCD	; 205
     af6:	8d e2       	ldi	r24, 0x2D	; 45
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	21 50       	subi	r18, 0x01	; 1
     afc:	30 40       	sbci	r19, 0x00	; 0
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	d9 f7       	brne	.-10     	; 0xafa <__stack+0x29b>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <__stack+0x2a7>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <__stack+0x2a9>
     b08:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);
				pass_tries=0;
				block_mode_flag=FALSE;
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 17 02 	call	0x42e	; 0x42e <EEPROM_vWriteByteToAddress>
				LCD_Cmd(0x01);
				LCD_String("login blocked");
				LCD_movecursor(2,1);
				LCD_String("wait 20 second");
				_delay_ms(BLOCK_MODE_TIME);
				pass_tries=0;
     b14:	00 e0       	ldi	r16, 0x00	; 0
				block_mode_flag=FALSE;
     b16:	e1 2c       	mov	r14, r1
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
			}
			LCD_Cmd(0x01);
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
			LCD_String("select mode:");
     b1e:	88 e4       	ldi	r24, 0x48	; 72
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
			LCD_movecursor(2,1);
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
			LCD_String("0:ADMIN 1:USER");
     b2e:	85 e5       	ldi	r24, 0x55	; 85
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
			while(key_pressed==notpressed){
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <__stack+0x2df>
				key_pressed=keypad_checkpress();
     b38:	0e 94 c7 02 	call	0x58e	; 0x58e <keypad_checkpress>
     b3c:	18 2f       	mov	r17, r24
			}
			LCD_Cmd(0x01);
			LCD_String("select mode:");
			LCD_movecursor(2,1);
			LCD_String("0:ADMIN 1:USER");
			while(key_pressed==notpressed){
     b3e:	1f 3f       	cpi	r17, 0xFF	; 255
     b40:	d9 f3       	breq	.-10     	; 0xb38 <__stack+0x2d9>
				key_pressed=keypad_checkpress();
				
				
			}
			if (key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE)
     b42:	80 ed       	ldi	r24, 0xD0	; 208
     b44:	81 0f       	add	r24, r17
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	90 f0       	brcs	.+36     	; 0xb6e <__stack+0x30f>
			{
				LCD_Cmd(0x01);
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
				LCD_String("wrong input");
     b50:	84 e6       	ldi	r24, 0x64	; 100
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     b58:	2f ef       	ldi	r18, 0xFF	; 255
     b5a:	33 ed       	ldi	r19, 0xD3	; 211
     b5c:	80 e3       	ldi	r24, 0x30	; 48
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	30 40       	sbci	r19, 0x00	; 0
     b62:	80 40       	sbci	r24, 0x00	; 0
     b64:	e1 f7       	brne	.-8      	; 0xb5e <__stack+0x2ff>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <__stack+0x309>
     b68:	00 00       	nop
				key_pressed=notpressed;
     b6a:	1f ef       	ldi	r17, 0xFF	; 255
     b6c:	67 c1       	rjmp	.+718    	; 0xe3c <__stack+0x5dd>
				_delay_ms(1000);
				continue;
				
			}
			uint8 pass_counter=0;
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	8d 83       	std	Y+5, r24	; 0x05
     b72:	8e 83       	std	Y+6, r24	; 0x06
     b74:	8f 83       	std	Y+7, r24	; 0x07
     b76:	88 87       	std	Y+8, r24	; 0x08
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	8a 83       	std	Y+2, r24	; 0x02
     b7c:	8b 83       	std	Y+3, r24	; 0x03
     b7e:	8c 83       	std	Y+4, r24	; 0x04
			switch(key_pressed)
     b80:	10 33       	cpi	r17, 0x30	; 48
     b82:	09 f4       	brne	.+2      	; 0xb86 <__stack+0x327>
     b84:	ad c0       	rjmp	.+346    	; 0xce0 <__stack+0x481>
     b86:	11 33       	cpi	r17, 0x31	; 49
     b88:	09 f4       	brne	.+2      	; 0xb8c <__stack+0x32d>
     b8a:	53 c1       	rjmp	.+678    	; 0xe32 <__stack+0x5d3>
     b8c:	57 c1       	rjmp	.+686    	; 0xe3c <__stack+0x5dd>
			{
				
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN){
					key_pressed=notpressed;
					LCD_Cmd(0x01);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
					LCD_String("admin mode");
     b94:	80 e7       	ldi	r24, 0x70	; 112
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
					LCD_movecursor(2,1);
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
					LCD_String("enter pass");
     ba4:	8b e7       	ldi	r24, 0x7B	; 123
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     bac:	9f ef       	ldi	r25, 0xFF	; 255
     bae:	23 ec       	ldi	r18, 0xC3	; 195
     bb0:	39 e0       	ldi	r19, 0x09	; 9
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	20 40       	sbci	r18, 0x00	; 0
     bb6:	30 40       	sbci	r19, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <__stack+0x353>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <__stack+0x35d>
     bbc:	00 00       	nop
					_delay_ms(200);
					pass_counter=0;
     bbe:	10 e0       	ldi	r17, 0x00	; 0
					while(pass_counter<PASS_SIZE){
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <__stack+0x3b7>
						
						
						
						while(key_pressed==notpressed)
						{
							key_pressed=keypad_checkpress();
     bc2:	0e 94 c7 02 	call	0x58e	; 0x58e <keypad_checkpress>
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <__stack+0x36b>
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
					pass_counter=0;
					while(pass_counter<PASS_SIZE){
						
						
						
						while(key_pressed==notpressed)
     bca:	8f 3f       	cpi	r24, 0xFF	; 255
     bcc:	d1 f3       	breq	.-12     	; 0xbc2 <__stack+0x363>
						{
							key_pressed=keypad_checkpress();
						}
						
						pass[pass_counter]=key_pressed;
     bce:	e5 e0       	ldi	r30, 0x05	; 5
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ec 0f       	add	r30, r28
     bd4:	fd 1f       	adc	r31, r29
     bd6:	e1 0f       	add	r30, r17
     bd8:	f1 1d       	adc	r31, r1
     bda:	80 83       	st	Z, r24
						
						LCD_Char(key_pressed);
     bdc:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	95 ea       	ldi	r25, 0xA5	; 165
     be4:	2e e0       	ldi	r18, 0x0E	; 14
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	90 40       	sbci	r25, 0x00	; 0
     bea:	20 40       	sbci	r18, 0x00	; 0
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <__stack+0x387>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <__stack+0x391>
     bf0:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_movecursor(2,12+pass_counter);
     bf2:	6c e0       	ldi	r22, 0x0C	; 12
     bf4:	61 0f       	add	r22, r17
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_Char(PASSWORD_SYMBOL);
     bfc:	8a e2       	ldi	r24, 0x2A	; 42
     bfe:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	81 ee       	ldi	r24, 0xE1	; 225
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	31 50       	subi	r19, 0x01	; 1
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <__stack+0x3a9>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <__stack+0x3b3>
     c12:	00 00       	nop
						_delay_ms(100);
						pass_counter++;
     c14:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_String("admin mode");
					LCD_movecursor(2,1);
					LCD_String("enter pass");
					_delay_ms(200);
					pass_counter=0;
					while(pass_counter<PASS_SIZE){
     c16:	14 30       	cpi	r17, 0x04	; 4
     c18:	b8 f2       	brcs	.-82     	; 0xbc8 <__stack+0x369>
						LCD_Char(PASSWORD_SYMBOL);
						_delay_ms(100);
						pass_counter++;
						key_pressed=notpressed;
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);
     c1a:	44 e0       	ldi	r20, 0x04	; 4
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	be 01       	movw	r22, r28
     c20:	6f 5f       	subi	r22, 0xFF	; 255
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_vReadBlockFromAddress>
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)///////////////////////
     c2c:	44 e0       	ldi	r20, 0x04	; 4
     c2e:	be 01       	movw	r22, r28
     c30:	6f 5f       	subi	r22, 0xFF	; 255
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	05 96       	adiw	r24, 0x05	; 5
     c38:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ui8ComparePass>
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	11 f5       	brne	.+68     	; 0xc84 <__stack+0x425>
					{
						login_mode=ADMIN;
						pass_tries=0;
						LCD_Cmd(0X01);
     c40:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						LCD_String("RIGHT PASS");
     c44:	86 e8       	ldi	r24, 0x86	; 134
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_movecursor(2,1);
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_String("ADMIN MODE");
     c54:	81 e9       	ldi	r24, 0x91	; 145
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	39 e6       	ldi	r19, 0x69	; 105
     c60:	88 e1       	ldi	r24, 0x18	; 24
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	30 40       	sbci	r19, 0x00	; 0
     c66:	80 40       	sbci	r24, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <__stack+0x403>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <__stack+0x40d>
     c6c:	00 00       	nop
						_delay_ms(500);
						LCD_Cmd(0X01);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						
						timer0_initializeCTC();
     c74:	0e 94 df 07 	call	0xfbe	; 0xfbe <timer0_initializeCTC>
						LCD_Cmd(0X01);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)///////////////////////
					{
						login_mode=ADMIN;
						pass_tries=0;
     c7e:	00 e0       	ldi	r16, 0x00	; 0
						key_pressed=notpressed;
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)///////////////////////
					{
						login_mode=ADMIN;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	2c c0       	rjmp	.+88     	; 0xcdc <__stack+0x47d>
						///////////////////
						
						
					}
					else{
						pass_tries++;
     c84:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode=NO_MODE;
						LCD_Cmd(0X01);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						LCD_String("WRONG PASS");
     c8c:	8c e9       	ldi	r24, 0x9C	; 156
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_movecursor(2,1);
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_String("TRIES LEFT");
     c9c:	87 ea       	ldi	r24, 0xA7	; 167
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_Char(TRIES_ALLOWED-pass_tries+ASCII_ZERO);
     ca4:	83 e3       	ldi	r24, 0x33	; 51
     ca6:	80 1b       	sub	r24, r16
     ca8:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	23 ed       	ldi	r18, 0xD3	; 211
     cb0:	30 e3       	ldi	r19, 0x30	; 48
     cb2:	91 50       	subi	r25, 0x01	; 1
     cb4:	20 40       	sbci	r18, 0x00	; 0
     cb6:	30 40       	sbci	r19, 0x00	; 0
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <__stack+0x453>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <__stack+0x45d>
     cbc:	00 00       	nop
						_delay_ms(1000);
						LCD_Cmd(0x01);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						if (pass_tries>=TRIES_ALLOWED)
     cc4:	03 30       	cpi	r16, 0x03	; 3
     cc6:	48 f0       	brcs	.+18     	; 0xcda <__stack+0x47b>
						{ EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <EEPROM_vWriteByteToAddress>
							block_mode_flag=TRUE;
							break;
     cd2:	1f ef       	ldi	r17, 0xFF	; 255
						LCD_Char(TRIES_ALLOWED-pass_tries+ASCII_ZERO);
						_delay_ms(1000);
						LCD_Cmd(0x01);
						if (pass_tries>=TRIES_ALLOWED)
						{ EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);
							block_mode_flag=TRUE;
     cd4:	ee 24       	eor	r14, r14
     cd6:	e3 94       	inc	r14
							break;
     cd8:	b1 c0       	rjmp	.+354    	; 0xe3c <__stack+0x5dd>
						
						
					}
					else{
						pass_tries++;
						login_mode=NO_MODE;
     cda:	8f 2d       	mov	r24, r15
     cdc:	1f ef       	ldi	r17, 0xFF	; 255
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <__stack+0x483>
				
			}
			uint8 pass_counter=0;
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
			switch(key_pressed)
     ce0:	8f 2d       	mov	r24, r15
			{
				
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN){
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__stack+0x489>
     ce6:	53 cf       	rjmp	.-346    	; 0xb8e <__stack+0x32f>
     ce8:	f8 2e       	mov	r15, r24
     cea:	a8 c0       	rjmp	.+336    	; 0xe3c <__stack+0x5dd>
				}
				break;
				case CHECK_GUEST_MODE :
				while(login_mode!=GUEST){
					key_pressed=notpressed;
					LCD_Cmd(0x01);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
					LCD_String("guest mode");
     cf2:	82 eb       	ldi	r24, 0xB2	; 178
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
					LCD_movecursor(2,1);
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
					LCD_String("enter pass");
     d02:	8b e7       	ldi	r24, 0x7B	; 123
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	93 ec       	ldi	r25, 0xC3	; 195
     d0e:	29 e0       	ldi	r18, 0x09	; 9
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	90 40       	sbci	r25, 0x00	; 0
     d14:	20 40       	sbci	r18, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <__stack+0x4b1>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <__stack+0x4bb>
     d1a:	00 00       	nop
					_delay_ms(200);
					pass_counter=0;
     d1c:	10 e0       	ldi	r17, 0x00	; 0
					while(pass_counter<PASS_SIZE){
     d1e:	2a c0       	rjmp	.+84     	; 0xd74 <__stack+0x515>
						
						while(key_pressed==notpressed)
						{
							key_pressed=keypad_checkpress();
     d20:	0e 94 c7 02 	call	0x58e	; 0x58e <keypad_checkpress>
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <__stack+0x4c9>
     d26:	8f ef       	ldi	r24, 0xFF	; 255
					LCD_String("enter pass");
					_delay_ms(200);
					pass_counter=0;
					while(pass_counter<PASS_SIZE){
						
						while(key_pressed==notpressed)
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	d1 f3       	breq	.-12     	; 0xd20 <__stack+0x4c1>
						{
							key_pressed=keypad_checkpress();
						}
						
						
						pass[pass_counter]=key_pressed;
     d2c:	e5 e0       	ldi	r30, 0x05	; 5
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ec 0f       	add	r30, r28
     d32:	fd 1f       	adc	r31, r29
     d34:	e1 0f       	add	r30, r17
     d36:	f1 1d       	adc	r31, r1
     d38:	80 83       	st	Z, r24
						LCD_Char(key_pressed);
     d3a:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	85 ea       	ldi	r24, 0xA5	; 165
     d42:	9e e0       	ldi	r25, 0x0E	; 14
     d44:	31 50       	subi	r19, 0x01	; 1
     d46:	80 40       	sbci	r24, 0x00	; 0
     d48:	90 40       	sbci	r25, 0x00	; 0
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <__stack+0x4e5>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <__stack+0x4ef>
     d4e:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_movecursor(2,12+pass_counter);
     d50:	6c e0       	ldi	r22, 0x0C	; 12
     d52:	61 0f       	add	r22, r17
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_Char(PASSWORD_SYMBOL);
     d5a:	8a e2       	ldi	r24, 0x2A	; 42
     d5c:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     d60:	2f ef       	ldi	r18, 0xFF	; 255
     d62:	31 ee       	ldi	r19, 0xE1	; 225
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	21 50       	subi	r18, 0x01	; 1
     d68:	30 40       	sbci	r19, 0x00	; 0
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <__stack+0x507>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <__stack+0x511>
     d70:	00 00       	nop
						_delay_ms(100);
						pass_counter++;
     d72:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_String("guest mode");
					LCD_movecursor(2,1);
					LCD_String("enter pass");
					_delay_ms(200);
					pass_counter=0;
					while(pass_counter<PASS_SIZE){
     d74:	14 30       	cpi	r17, 0x04	; 4
     d76:	b8 f2       	brcs	.-82     	; 0xd26 <__stack+0x4c7>
						LCD_Char(PASSWORD_SYMBOL);
						_delay_ms(100);
						pass_counter++;
						key_pressed=notpressed;
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);
     d78:	44 e0       	ldi	r20, 0x04	; 4
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	86 e0       	ldi	r24, 0x06	; 6
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_vReadBlockFromAddress>
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	ce 01       	movw	r24, r28
     d94:	05 96       	adiw	r24, 0x05	; 5
     d96:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ui8ComparePass>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	f9 f4       	brne	.+62     	; 0xddc <__stack+0x57d>
					{
						login_mode=GUEST;
						pass_tries=0;
						LCD_Cmd(0x01);
     d9e:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						LCD_String("right pass");
     da2:	8d eb       	ldi	r24, 0xBD	; 189
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_movecursor(2,1);
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_String("guest mode");
     db2:	82 eb       	ldi	r24, 0xB2	; 178
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
     dba:	9f ef       	ldi	r25, 0xFF	; 255
     dbc:	29 e6       	ldi	r18, 0x69	; 105
     dbe:	38 e1       	ldi	r19, 0x18	; 24
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	20 40       	sbci	r18, 0x00	; 0
     dc4:	30 40       	sbci	r19, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <__stack+0x561>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <__stack+0x56b>
     dca:	00 00       	nop
						_delay_ms(500);
						timer0_initializeCTC();
     dcc:	0e 94 df 07 	call	0xfbe	; 0xfbe <timer0_initializeCTC>
						LCD_Cmd(0x01);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)
					{
						login_mode=GUEST;
						pass_tries=0;
     dd6:	00 e0       	ldi	r16, 0x00	; 0
						key_pressed=notpressed;
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)
					{
						login_mode=GUEST;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	29 c0       	rjmp	.+82     	; 0xe2e <__stack+0x5cf>
						_delay_ms(500);
						timer0_initializeCTC();
						LCD_Cmd(0x01);
					}
					else{
						pass_tries++;
     ddc:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode =NO_MODE;
						LCD_Cmd(0x01);
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_Cmd>
						LCD_String("wrong pass");
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_movecursor(2,1);
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_movecursor>
						LCD_String("tries left");
     df4:	83 ed       	ldi	r24, 0xD3	; 211
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_String>
						LCD_Char(TRIES_ALLOWED-pass_tries+ASCII_ZERO);
     dfc:	83 e3       	ldi	r24, 0x33	; 51
     dfe:	80 1b       	sub	r24, r16
     e00:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	93 ed       	ldi	r25, 0xD3	; 211
     e08:	20 e3       	ldi	r18, 0x30	; 48
     e0a:	81 50       	subi	r24, 0x01	; 1
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	20 40       	sbci	r18, 0x00	; 0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <__stack+0x5ab>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <__stack+0x5b5>
     e14:	00 00       	nop
						_delay_ms(1000);
						if (pass_tries>=TRIES_ALLOWED)
     e16:	03 30       	cpi	r16, 0x03	; 3
     e18:	48 f0       	brcs	.+18     	; 0xe2c <__stack+0x5cd>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	8a e0       	ldi	r24, 0x0A	; 10
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 17 02 	call	0x42e	; 0x42e <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;
							break;
     e24:	1f ef       	ldi	r17, 0xFF	; 255
						LCD_Char(TRIES_ALLOWED-pass_tries+ASCII_ZERO);
						_delay_ms(1000);
						if (pass_tries>=TRIES_ALLOWED)
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);
							block_mode_flag = TRUE;
     e26:	ee 24       	eor	r14, r14
     e28:	e3 94       	inc	r14
							break;
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <__stack+0x5dd>
						timer0_initializeCTC();
						LCD_Cmd(0x01);
					}
					else{
						pass_tries++;
						login_mode =NO_MODE;
     e2c:	8f 2d       	mov	r24, r15
     e2e:	1f ef       	ldi	r17, 0xFF	; 255
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <__stack+0x5d5>
				
			}
			uint8 pass_counter=0;
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};
			switch(key_pressed)
     e32:	8f 2d       	mov	r24, r15
						
					}
				}
				break;
				case CHECK_GUEST_MODE :
				while(login_mode!=GUEST){
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	09 f0       	breq	.+2      	; 0xe3a <__stack+0x5db>
     e38:	59 cf       	rjmp	.-334    	; 0xcec <__stack+0x48d>
     e3a:	f8 2e       	mov	r15, r24
			key_pressed=notpressed;
			LCD_Cmd(0x01);
			LCD_String("session time out");
			_delay_ms(1000);
		}
		while (login_mode==NO_MODE)
     e3c:	ff 20       	and	r15, r15
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__stack+0x5e3>
     e40:	46 ce       	rjmp	.-884    	; 0xace <__stack+0x26f>
				break;
			}
			
			
		}////////
		if (login_mode == ADMIN)
     e42:	31 e0       	ldi	r19, 0x01	; 1
     e44:	f3 12       	cpse	r15, r19
     e46:	38 c0       	rjmp	.+112    	; 0xeb8 <__stack+0x659>
			//LCD_String("Enter 1 on mobile to open door");


			
			
			if(UartV == '1'){
     e48:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     e4c:	81 33       	cpi	r24, 0x31	; 49
     e4e:	39 f4       	brne	.+14     	; 0xe5e <__stack+0x5ff>
				
				Servo(90);
     e50:	6a e5       	ldi	r22, 0x5A	; 90
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 c1 07 	call	0xf82	; 0xf82 <Servo>
     e5c:	2d c0       	rjmp	.+90     	; 0xeb8 <__stack+0x659>
				
			}
			else if (UartV == '2')
     e5e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     e62:	82 33       	cpi	r24, 0x32	; 50
     e64:	31 f4       	brne	.+12     	; 0xe72 <__stack+0x613>
			{
				Servo(0);
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	cb 01       	movw	r24, r22
     e6c:	0e 94 c1 07 	call	0xf82	; 0xf82 <Servo>
     e70:	23 c0       	rjmp	.+70     	; 0xeb8 <__stack+0x659>
			}
			else if(UartV=='3')
     e72:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     e76:	83 33       	cpi	r24, 0x33	; 51
     e78:	71 f4       	brne	.+28     	; 0xe96 <__stack+0x637>
			{
				PORTD ^=(1<<2);
     e7a:	92 b3       	in	r25, 0x12	; 18
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	89 27       	eor	r24, r25
     e80:	82 bb       	out	0x12, r24	; 18
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	99 e6       	ldi	r25, 0x69	; 105
     e86:	28 e1       	ldi	r18, 0x18	; 24
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	20 40       	sbci	r18, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <__stack+0x629>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <__stack+0x633>
     e92:	00 00       	nop
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <__stack+0x659>
				_delay_ms(500);
			}
			else if(UartV=='4')
     e96:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     e9a:	84 33       	cpi	r24, 0x34	; 52
     e9c:	69 f4       	brne	.+26     	; 0xeb8 <__stack+0x659>
			{
				PORTD ^=(1<<3);
     e9e:	92 b3       	in	r25, 0x12	; 18
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	89 27       	eor	r24, r25
     ea4:	82 bb       	out	0x12, r24	; 18
     ea6:	3f ef       	ldi	r19, 0xFF	; 255
     ea8:	89 e6       	ldi	r24, 0x69	; 105
     eaa:	98 e1       	ldi	r25, 0x18	; 24
     eac:	31 50       	subi	r19, 0x01	; 1
     eae:	80 40       	sbci	r24, 0x00	; 0
     eb0:	90 40       	sbci	r25, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <__stack+0x64d>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <__stack+0x657>
     eb6:	00 00       	nop
				_delay_ms(500);
			}
			
		}
		if(login_mode==GUEST)
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	f2 12       	cpse	r15, r18
     ebc:	23 c0       	rjmp	.+70     	; 0xf04 <__stack+0x6a5>
		{
			if (UartV=='1')
     ebe:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     ec2:	81 33       	cpi	r24, 0x31	; 49
     ec4:	71 f4       	brne	.+28     	; 0xee2 <__stack+0x683>
			{
				PORTD ^=(1<<2);
     ec6:	92 b3       	in	r25, 0x12	; 18
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	89 27       	eor	r24, r25
     ecc:	82 bb       	out	0x12, r24	; 18
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	89 e6       	ldi	r24, 0x69	; 105
     ed2:	98 e1       	ldi	r25, 0x18	; 24
     ed4:	31 50       	subi	r19, 0x01	; 1
     ed6:	80 40       	sbci	r24, 0x00	; 0
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	e1 f7       	brne	.-8      	; 0xed4 <__stack+0x675>
     edc:	00 c0       	rjmp	.+0      	; 0xede <__stack+0x67f>
     ede:	00 00       	nop
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <__stack+0x6a5>
				_delay_ms(500);
			}
			else if (UartV=='2')
     ee2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <UartV>
     ee6:	82 33       	cpi	r24, 0x32	; 50
     ee8:	69 f4       	brne	.+26     	; 0xf04 <__stack+0x6a5>
			{
				PORTD ^=(1<<3);
     eea:	92 b3       	in	r25, 0x12	; 18
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	89 27       	eor	r24, r25
     ef0:	82 bb       	out	0x12, r24	; 18
     ef2:	2f ef       	ldi	r18, 0xFF	; 255
     ef4:	39 e6       	ldi	r19, 0x69	; 105
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	30 40       	sbci	r19, 0x00	; 0
     efc:	80 40       	sbci	r24, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <__stack+0x699>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <__stack+0x6a3>
     f02:	00 00       	nop
				_delay_ms(500);
			}
		}
		
		
		data=PrintKey();
     f04:	0e 94 81 02 	call	0x502	; 0x502 <PrintKey>
		
		
		if(data!=0)
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <__stack+0x6af>
     f0c:	9b cd       	rjmp	.-1226   	; 0xa44 <__stack+0x1e5>
		{
			LCD_Char(data);
     f0e:	0e 94 90 03 	call	0x720	; 0x720 <LCD_Char>
     f12:	9f ef       	ldi	r25, 0xFF	; 255
     f14:	23 ec       	ldi	r18, 0xC3	; 195
     f16:	39 e0       	ldi	r19, 0x09	; 9
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	20 40       	sbci	r18, 0x00	; 0
     f1c:	30 40       	sbci	r19, 0x00	; 0
     f1e:	e1 f7       	brne	.-8      	; 0xf18 <__stack+0x6b9>
     f20:	00 c0       	rjmp	.+0      	; 0xf22 <__stack+0x6c3>
     f22:	00 00       	nop
     f24:	8f cd       	rjmp	.-1250   	; 0xa44 <__stack+0x1e5>

00000f26 <__vector_10>:
}



ISR(TIMER0_COMP_vect)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
	session_counter++;
     f34:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <session_counter>
     f38:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <session_counter+0x1>
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <session_counter+0x1>
     f42:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <session_counter>
}
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_13>:

ISR(USART_RXC_vect)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	8f 93       	push	r24
	UartV=UDR;
     f60:	8c b1       	in	r24, 0x0c	; 12
     f62:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <UartV>
}
     f66:	8f 91       	pop	r24
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <Timer1_ServoPWM>:
     f72:	81 b3       	in	r24, 0x11	; 17
     f74:	80 62       	ori	r24, 0x20	; 32
     f76:	81 bb       	out	0x11, r24	; 17
     f78:	82 e8       	ldi	r24, 0x82	; 130
     f7a:	8f bd       	out	0x2f, r24	; 47
     f7c:	8b e1       	ldi	r24, 0x1B	; 27
     f7e:	8e bd       	out	0x2e, r24	; 46
     f80:	08 95       	ret

00000f82 <Servo>:
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	26 5a       	subi	r18, 0xA6	; 166
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	4f 4f       	sbci	r20, 0xFF	; 255
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	aa ef       	ldi	r26, 0xFA	; 250
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	0e 94 28 08 	call	0x1050	; 0x1050 <__muluhisi3>
     f96:	24 eb       	ldi	r18, 0xB4	; 180
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	0e 94 09 08 	call	0x1012	; 0x1012 <__divmodsi4>
     fa2:	27 50       	subi	r18, 0x07	; 7
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	3b bd       	out	0x2b, r19	; 43
     fa8:	2a bd       	out	0x2a, r18	; 42
     faa:	08 95       	ret

00000fac <Timer2_PhasePWM>:
     fac:	81 b3       	in	r24, 0x11	; 17
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	81 bb       	out	0x11, r24	; 17
     fb2:	85 b5       	in	r24, 0x25	; 37
     fb4:	82 66       	ori	r24, 0x62	; 98
     fb6:	85 bd       	out	0x25, r24	; 37
     fb8:	08 95       	ret

00000fba <PWM_duty_Timer2>:
     fba:	83 bd       	out	0x23, r24	; 35
     fbc:	08 95       	ret

00000fbe <timer0_initializeCTC>:
     fbe:	8e e4       	ldi	r24, 0x4E	; 78
     fc0:	8c bf       	out	0x3c, r24	; 60
     fc2:	83 b7       	in	r24, 0x33	; 51
     fc4:	88 60       	ori	r24, 0x08	; 8
     fc6:	83 bf       	out	0x33, r24	; 51
     fc8:	83 b7       	in	r24, 0x33	; 51
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	83 bf       	out	0x33, r24	; 51
     fce:	83 b7       	in	r24, 0x33	; 51
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	83 bf       	out	0x33, r24	; 51
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	8d 7f       	andi	r24, 0xFD	; 253
     fd8:	83 bf       	out	0x33, r24	; 51
     fda:	83 b7       	in	r24, 0x33	; 51
     fdc:	84 60       	ori	r24, 0x04	; 4
     fde:	83 bf       	out	0x33, r24	; 51
     fe0:	78 94       	sei
     fe2:	89 b7       	in	r24, 0x39	; 57
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	89 bf       	out	0x39, r24	; 57
     fe8:	08 95       	ret

00000fea <timer0_stop>:
     fea:	83 b7       	in	r24, 0x33	; 51
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	83 bf       	out	0x33, r24	; 51
     ff0:	83 b7       	in	r24, 0x33	; 51
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	83 bf       	out	0x33, r24	; 51
     ff6:	83 b7       	in	r24, 0x33	; 51
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	83 bf       	out	0x33, r24	; 51
     ffc:	08 95       	ret

00000ffe <UART_Init>:
     ffe:	8a b1       	in	r24, 0x0a	; 10
    1000:	88 69       	ori	r24, 0x98	; 152
    1002:	8a b9       	out	0x0a, r24	; 10
    1004:	80 b5       	in	r24, 0x20	; 32
    1006:	86 68       	ori	r24, 0x86	; 134
    1008:	80 bd       	out	0x20, r24	; 32
    100a:	87 e6       	ldi	r24, 0x67	; 103
    100c:	89 b9       	out	0x09, r24	; 9
    100e:	10 bc       	out	0x20, r1	; 32
    1010:	08 95       	ret

00001012 <__divmodsi4>:
    1012:	05 2e       	mov	r0, r21
    1014:	97 fb       	bst	r25, 7
    1016:	1e f4       	brtc	.+6      	; 0x101e <__divmodsi4+0xc>
    1018:	00 94       	com	r0
    101a:	0e 94 20 08 	call	0x1040	; 0x1040 <__negsi2>
    101e:	57 fd       	sbrc	r21, 7
    1020:	07 d0       	rcall	.+14     	; 0x1030 <__divmodsi4_neg2>
    1022:	0e 94 33 08 	call	0x1066	; 0x1066 <__udivmodsi4>
    1026:	07 fc       	sbrc	r0, 7
    1028:	03 d0       	rcall	.+6      	; 0x1030 <__divmodsi4_neg2>
    102a:	4e f4       	brtc	.+18     	; 0x103e <__divmodsi4_exit>
    102c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__negsi2>

00001030 <__divmodsi4_neg2>:
    1030:	50 95       	com	r21
    1032:	40 95       	com	r20
    1034:	30 95       	com	r19
    1036:	21 95       	neg	r18
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	4f 4f       	sbci	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255

0000103e <__divmodsi4_exit>:
    103e:	08 95       	ret

00001040 <__negsi2>:
    1040:	90 95       	com	r25
    1042:	80 95       	com	r24
    1044:	70 95       	com	r23
    1046:	61 95       	neg	r22
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	8f 4f       	sbci	r24, 0xFF	; 255
    104c:	9f 4f       	sbci	r25, 0xFF	; 255
    104e:	08 95       	ret

00001050 <__muluhisi3>:
    1050:	0e 94 55 08 	call	0x10aa	; 0x10aa <__umulhisi3>
    1054:	a5 9f       	mul	r26, r21
    1056:	90 0d       	add	r25, r0
    1058:	b4 9f       	mul	r27, r20
    105a:	90 0d       	add	r25, r0
    105c:	a4 9f       	mul	r26, r20
    105e:	80 0d       	add	r24, r0
    1060:	91 1d       	adc	r25, r1
    1062:	11 24       	eor	r1, r1
    1064:	08 95       	ret

00001066 <__udivmodsi4>:
    1066:	a1 e2       	ldi	r26, 0x21	; 33
    1068:	1a 2e       	mov	r1, r26
    106a:	aa 1b       	sub	r26, r26
    106c:	bb 1b       	sub	r27, r27
    106e:	fd 01       	movw	r30, r26
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__udivmodsi4_ep>

00001072 <__udivmodsi4_loop>:
    1072:	aa 1f       	adc	r26, r26
    1074:	bb 1f       	adc	r27, r27
    1076:	ee 1f       	adc	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	a2 17       	cp	r26, r18
    107c:	b3 07       	cpc	r27, r19
    107e:	e4 07       	cpc	r30, r20
    1080:	f5 07       	cpc	r31, r21
    1082:	20 f0       	brcs	.+8      	; 0x108c <__udivmodsi4_ep>
    1084:	a2 1b       	sub	r26, r18
    1086:	b3 0b       	sbc	r27, r19
    1088:	e4 0b       	sbc	r30, r20
    108a:	f5 0b       	sbc	r31, r21

0000108c <__udivmodsi4_ep>:
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	1a 94       	dec	r1
    1096:	69 f7       	brne	.-38     	; 0x1072 <__udivmodsi4_loop>
    1098:	60 95       	com	r22
    109a:	70 95       	com	r23
    109c:	80 95       	com	r24
    109e:	90 95       	com	r25
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	bd 01       	movw	r22, r26
    10a6:	cf 01       	movw	r24, r30
    10a8:	08 95       	ret

000010aa <__umulhisi3>:
    10aa:	a2 9f       	mul	r26, r18
    10ac:	b0 01       	movw	r22, r0
    10ae:	b3 9f       	mul	r27, r19
    10b0:	c0 01       	movw	r24, r0
    10b2:	a3 9f       	mul	r26, r19
    10b4:	70 0d       	add	r23, r0
    10b6:	81 1d       	adc	r24, r1
    10b8:	11 24       	eor	r1, r1
    10ba:	91 1d       	adc	r25, r1
    10bc:	b2 9f       	mul	r27, r18
    10be:	70 0d       	add	r23, r0
    10c0:	81 1d       	adc	r24, r1
    10c2:	11 24       	eor	r1, r1
    10c4:	91 1d       	adc	r25, r1
    10c6:	08 95       	ret

000010c8 <_exit>:
    10c8:	f8 94       	cli

000010ca <__stop_program>:
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <__stop_program>
